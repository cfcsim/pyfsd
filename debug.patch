diff --git a/pyfsd/protocol/client.py b/pyfsd/protocol/client.py
index 43503cd..3dd4bca 100644
--- a/pyfsd/protocol/client.py
+++ b/pyfsd/protocol/client.py
@@ -1,3 +1,4 @@
+from time import time
 from typing import TYPE_CHECKING, List, Optional
 
 from twisted.internet.interfaces import ITransport
@@ -53,11 +54,26 @@ class FSDClientProtocol(LineReceiver):
         tail = "\r\n" if auto_newline else ""
         for line in lines:
             buffer += f"{line}{tail}"
+        host: str = self.transport.getPeer().host
+        print(
+            time(),
+            lines,
+            "===>",
+            self.client.callsign if self.client is not None else host,
+        )
         self.transport.write(buffer.encode())  # type: ignore
 
     def sendError(self, errno: int, env: str = "", fatal: bool = False) -> None:
         assert not (errno < 0 and errno <= 13)
         err_str = FSDErrors.error_names[errno]
+        host: str = self.transport.getPeer().host
+        print(
+            time(),
+            err_str,
+            f"({env})",
+            "=ER>",
+            self.client.callsign if self.client is not None else host,
+        )
         self.send(
             FSDClientPacket.makePacket(
                 FSDClientPacket.ERROR + "server",
@@ -510,6 +526,13 @@ class FSDClientProtocol(LineReceiver):
             return
         if not line:
             return
+        host: str = self.transport.getPeer().host
+        print(
+            time(),
+            line,
+            "<==",
+            self.client.callsign if self.client is not None else host,
+        )
         command, packet = FSDClientPacket.breakPacket(line)
         if command == FSDClientPacket.ADD_ATC or command == FSDClientPacket.ADD_PILOT:
             self.handleAddClient(
