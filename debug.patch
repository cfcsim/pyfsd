diff --git a/pyfsd/protocol/client.py b/pyfsd/protocol/client.py
index fbcb7a9..24564b1 100644
--- a/pyfsd/protocol/client.py
+++ b/pyfsd/protocol/client.py
@@ -1,3 +1,4 @@
+from time import time
 from typing import TYPE_CHECKING, List, Optional, Tuple
 
 from twisted.internet import reactor
@@ -46,6 +47,13 @@ class FSDClientProtocol(LineReceiver):
         self.factory.triggerEvent("newConnectionEstablished", (self,), {})
 
     def send(self, *lines: str, auto_newline: bool = True) -> None:
+        host: str = self.transport.getPeer().host
+        self.logger.debug(
+            "{time} {lines} ===> {cs}",
+            time=time(),
+            lines=lines,
+            cs=self.client.callsign if self.client is not None else host,
+        )
         self.transport.write(  # type: ignore
             joinLines(*lines, newline=auto_newline).encode()  # type: ignore
         )
@@ -53,6 +61,14 @@ class FSDClientProtocol(LineReceiver):
     def sendError(self, errno: int, env: str = "", fatal: bool = False) -> None:
         assert not (errno < 0 and errno <= 13)
         err_str = FSDErrors.error_names[errno]
+        host: str = self.transport.getPeer().host
+        self.logger.debug(
+            "{time} {err} ({env}) =ER> {cs}",
+            time=time(),
+            err=err_str,
+            env=env,
+            cs=self.client.callsign if self.client is not None else host,
+        )
         self.send(
             makePacket(
                 concat(FSDCLIENTPACKET.ERROR, "server"),
@@ -625,6 +641,13 @@ class FSDClientProtocol(LineReceiver):
             return
         if not line:
             return
+        host: str = self.transport.getPeer().host
+        self.logger.debug(
+            "{time} {line} <=== {cs}",
+            time=time(),
+            line=line,
+            cs=self.client.callsign if self.client is not None else host,
+        )
         command, packet = breakPacket(line, FSDCLIENTPACKET.client_used_command)
         if command == FSDCLIENTPACKET.ADD_ATC or command == FSDCLIENTPACKET.ADD_PILOT:
             self.handleAddClient(
diff --git a/pyfsd/setup_loguru.py b/pyfsd/setup_loguru.py
index c61dd89..b2af7db 100644
--- a/pyfsd/setup_loguru.py
+++ b/pyfsd/setup_loguru.py
@@ -52,7 +52,8 @@ def warningCapturer(message, category, filename, lineno, file=None, line=None):
 def setupLoguru() -> None:
     # Avoid stderr lost
     logger.remove()
-    logger.add(sys.__stderr__)
+    logger.add(sys.__stderr__, level="INFO")
+    logger.add("file.log", level="DEBUG")
     # Delete observers
     globalLogBeginner._publisher._observers = []
     # Setup loguru
