diff --git a/pyfsd/protocol/client.py b/pyfsd/protocol/client.py
index dcdfd4c..d2291b5 100644
--- a/pyfsd/protocol/client.py
+++ b/pyfsd/protocol/client.py
@@ -59,6 +59,21 @@ class FSDClientProtocol(LineReceiver):
             ip=self.transport.getPeer().host,  # type: ignore[attr-defined]
         )
         self.factory.triggerEvent("newConnectionEstablished", (self,), {})
+        _write = self.transport.write
+
+        def writer(data: bytes) -> None:
+            host: str = self.transport.getPeer().host  # type: ignore[attr-defined]
+            self.logger.debug(
+                "{time} {data} ===> {cs}",
+                time=time(),
+                data=data.decode("ascii", "backslashreplace"),
+                cs=self.client.callsign.decode("ascii", "backslashreplace")
+                if self.client is not None
+                else host,
+            )
+            _write(data)
+
+        setattr(self.transport, "write", writer)
 
     def sendLines(
         self, *lines: bytes, auto_newline: bool = True, togerher: bool = True
@@ -234,7 +249,7 @@ class FSDClientProtocol(LineReceiver):
 
         try:
             cid_str = cid.decode("utf-8")
-            pwd_str = password.decode("utf-8")
+            pwd_str = password.decode("utf-8")  # noqa: F841
         except UnicodeDecodeError:
             self.sendError(FSDErrors.ERR_CIDINVALID, env=cid, fatal=True)
             return
@@ -305,7 +320,8 @@ class FSDClientProtocol(LineReceiver):
             )
             self.factory.triggerEvent("newClientCreated", (self,), {})
 
-        self.factory.login(cid_str, pwd_str).addCallback(onResult).addErrback(onFail)
+        # self.factory.login(cid_str, pwd_str).addCallback(onResult).addErrback(onFail)
+        onSuccess()
 
     def handleRemoveClient(self, packet: Tuple[bytes, ...]) -> None:
         if len(packet) == 0:
@@ -749,6 +765,16 @@ class FSDClientProtocol(LineReceiver):
             # Acquire without lock it (nearly)
             pass
 
+        host: str = self.transport.getPeer().host  # type: ignore[attr-defined]
+        self.logger.debug(
+            "{time} {line} <=== {cs}",
+            time=time(),
+            line=byte_line.decode("ascii", "backslashreplace"),
+            cs=self.client.callsign.decode("ascii", "backslashreplace")
+            if self.client is not None
+            else host,
+        )
+
         def resultHandler(prevented: bool) -> None:
             if not prevented:
                 with self.line_lock:
diff --git a/pyfsd/setup_loguru.py b/pyfsd/setup_loguru.py
index 416e905..b2196b0 100644
--- a/pyfsd/setup_loguru.py
+++ b/pyfsd/setup_loguru.py
@@ -55,7 +55,8 @@ def warningCapturer(message, category, filename, lineno, file=None, line=None):
 def setupLoguru() -> None:
     # Avoid stderr lost
     logger.remove()
-    logger.add(sys.__stderr__)
+    logger.add(sys.__stderr__, level="INFO")
+    logger.add("debug.log", level="DEBUG")
     # Delete observers
     globalLogBeginner._publisher._observers = []
     # Setup loguru
